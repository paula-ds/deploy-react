{"version":3,"sources":["chartConfig.js","App.js","components/StocksGraph.jsx","serviceWorker.js","index.js","logo.svg"],"names":["chartJsConfig","responsive","scales","xAxes","type","distribution","ticks","source","time","displayFormats","second","unit","scaleLabel","display","labelString","yAxes","beginAtZero","stepValue","steps","pan","enabled","mode","zoom","drag","chartColors","chartDataset","stock_name","color","stock_values","label","toUpperCase","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","App","React","Component","props","seleccionar","accion","console","log","state","estado","estado_ex","stock","exchange","update","buy","sell","grafico","stock_all","diccionario","conexion","diccionario_acc","volumen_tot","onStock","_onStock","bind","onExchange","_onExchange","onBuy","_onBuy","onSell","_onSell","onUpdate","_onUpdate","this","socket","io","path","transports","on","setState","requestStock","requestExchange","disconnect","componentDidMount","emit","dic","dic2","largo","length","i","acc","nombre","acciones","exchanges","Object","keys","largo2","volumen","volumen_total","suma_sell","suma_buy","key","companias","s","b","j","total","toFixed","aux","ticker","cantidad","name","ex","action","fifo","push","presente","new_state","estado_buy","estado_sell","actualizar_buy","actualizar_sell","items","items_exchange","join","onClick","handleClick","align","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.7cedbba0.chunk.js","sourcesContent":["//código extraido de https://github.com/virajvchavan/stocks/blob/master/src/chartConfig.js\r\n\r\nexport const chartJsConfig = { \r\n    responsive: true,\r\n    scales: {\r\n      xAxes: [{\r\n        type: 'time',\r\n        distribution: 'linear',\r\n        ticks: {\r\n          source: 'auto'\r\n        },\r\n        time: {\r\n          displayFormats: {second: 'h:mm:ss a'},\r\n          unit: 'second'\r\n        },\r\n        scaleLabel: {\r\n          display: true,\r\n          labelString: 'Time'\r\n        }\r\n      }],\r\n      yAxes: [{\r\n        ticks: {\r\n          beginAtZero: true,\r\n          stepValue: 10,\r\n          steps: 10\r\n        },\r\n        scaleLabel: {\r\n          display: true,\r\n          labelString: 'Price ($)'\r\n        }\r\n      }]\r\n    },\r\n    pan: {\r\n      enabled: true,\r\n      mode: 'x'\r\n    },\r\n    zoom: {\r\n      enabled: true,\r\n      drag: false,\r\n      mode: 'x'\r\n    }\r\n  };\r\n  \r\n  // keep enough colors (should be as many as the number of stocks recieved)\r\n  // adding these manually to make sure the colors actually look good\r\n  export const chartColors = [\"rgb(244, 67, 54)\", \"rgb(76, 175, 80)\", \"rgb(63, 81, 181)\", \"rgb(255, 152, 0)\", \"rgb(33, 150, 243)\", \"rgb(139, 195, 74)\", \"rgb(255, 87, 34)\", \"rgb(121, 85, 72)\", \"rgb(233, 30, 99)\", \"rgb(205, 220, 57)\", \"rgb(156, 39, 176)\", \"rgb(255, 235, 59)\", \"rgb(158, 158, 158)\", \"rgb(103, 58, 183)\", \"rgb(0, 150, 136)\", \"rgb(255, 193, 7)\", \"rgb(96, 125, 139)\", \"rgb(33, 33, 33)\", \"rgb(169, 4, 4)\", \"rgb(1, 74, 64)\", \"rgb(179, 3, 72)\", \"rgb(84, 58, 68)\"];\r\n  \r\n  export const chartDataset = (stock_name, color, stock_values) => {\r\n    return {\r\n      label: stock_name.toUpperCase(),\r\n      fill: false,\r\n      lineTension: 0,\r\n      backgroundColor: color,\r\n      borderColor: color,\r\n      borderCapStyle: 'butt',\r\n      borderJoinStyle: 'miter',\r\n      pointBorderColor: color,\r\n      pointBackgroundColor: '#fff',\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: color,\r\n      pointHoverBorderColor: color,\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 3,\r\n      pointHitRadius: 10,\r\n      data: stock_values\r\n    };\r\n  };","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport io from 'socket.io-client';\nimport StocksGraph from \"./components/StocksGraph.jsx\";\n\n//EN LA RUBRICA DICE QUE ENTRA Y SE CONECTA, PONER COMO SUPUESTO\n//cambio porcentual = ((V2-V1)/V1) × 100\n// se asume que usuario conectado es racional y si está conectado, no apretará el botón de volver a conectarse\n\nclass App extends Component {  // estructura de https://github.com/fmsandoval/IIC3103_T3/\n  constructor(props) {\n    super(props);\n    this.state = {\n      estado:false,   \n      estado_ex:false,\n      stock: {},\n      exchange : {},\n      update : {},\n      data:{},\n      buy :{},\n      sell:{},\n      grafico:{},\n      stock_all:{},\n      diccionario:{},\n      conexion: \"Conectado\",\n      diccionario_acc : {},\n      volumen_tot:{}  //revisar esto\n    };\n\n    this.onStock = this._onStock.bind(this);\n    this.onExchange = this._onExchange.bind(this);\n    this.onBuy = this._onBuy.bind(this);\n    this.onSell = this._onSell.bind(this);\n    this.onUpdate = this._onUpdate.bind(this);\n\n  }\n\n  componentDidMount() {\n    this.socket = io('wss://​le-18262636.bitzonte.com', {\n      path: '/stocks',\n      transports: ['websocket'],\n      'forceNew': true\n    });\n    this.socket.on('connect', function() {\n      console.log(\"connected from the client side\");\n      });\n\n    var aux = {\"volumen\":0};\n    this.setState({ volumen_tot: aux});\n    this.setState({ conexion: \"Conectado\"});\n    this.socket.on('STOCKS', this.onStock);\n    this.socket.on('EXCHANGES', this.onExchange);\n    this.socket.on('BUY', this.onBuy);  //si le digo emitir buy, anda a onbuy\n    this.socket.on('SELL', this.onSell);\n    this.socket.on('UPDATE', this.onUpdate);\n\n    this.requestStock(); \n    this.requestExchange();\n    \n    //his.requestBuy();\n    //this.requestExchange(); \n  }\n  \n  handleClick() {\n    console.log('Cliente desconectado');\n    this.setState({ conexion: \"Desconectado\" });\n    this.socket.disconnect()\n   }\n\n  reconectar() { //poner los otros on\n    console.log (\"Reconectando\");\n    this.componentDidMount()\n    // this.socket = io('wss://​le-18262636.bitzonte.com', {'forceNew': true, path: '/stocks',\n    // transports: ['websocket']});\n    // this.setState({ conexion: \"Conectado\" });\n    \n    // this.socket.on('connect', function() {\n    //   console.log(\"connected from the client side\");\n    //   });   \n    // this.socket.on('STOCKS', this.onStock);\n    // this.socket.on('EXCHANGES', this.onExchange);\n    // this.socket.on('BUY', this.onBuy);  //si le digo emitir buy, anda a onbuy\n    // this.socket.on('SELL', this.onSell);\n    // this.socket.on('UPDATE', this.onUpdate);\n    \n    // this.requestStock(); \n    // this.requestExchange();\n  }\n  requestStock() {\n    console.log (\"entra al request stock\")\n    this.socket.emit(\"STOCKS\");\n  }\n  requestExchange() {\n    console.log (\"entra al request exchange\")\n    this.socket.emit(\"EXCHANGES\");\n  }\n\n  requestUpdate() {\n    this.socket.emit(\"UPDATE\");\n  }\n\n  requestBuy() {\n    this.socket.emit(\"BUY\");\n  }\n  requestSell() {\n    this.socket.emit(\"SELL\");\n  }\n\n  _onStock(data) {  //STOCKS SON LAS ACCIONES = EMPRESAS ABIERTAS\n    //this.setState({ stock: data });  //lo borre, ojo\n    console.log (\"entra al on stock\")\n    var stock={};\n\n    var dic = {};\n    var dic2 = {};\n\n    var largo = data.length;\n    for (var i=0;i<largo;i++) {  \n      \n      var acc = data[i][\"ticker\"];\n      stock[acc] = {\"company_name\": data[i][\"company_name\"],\"quote_base\":data[i][\"quote_base\"], \"country\":data[i][\"country\"], \"click\":0 }\n      var nombre = data[i][\"company_name\"];\n      dic[nombre] = acc;\n      dic2[acc] = nombre;\n    }\n    this.setState({ stock_all: stock }); //dejar como ticker: {lo otro }\n    this.setState({ estado: true });\n    this.setState({ diccionario: dic });\n    this.setState({ diccionario_acc: dic2 });\n\n    //inicializar update:\n\n  }\n  _onExchange(data) {  //todos los mercados quetienen en listed companies las acciones que se transan ahí\n    //formato listed_companyes ={nombres:volumen compra}\n    var acciones= {};\n    var exchanges = {};\n    var largo = Object.keys(data).length\n    var largo2 = 0;\n    var volumen = 0;\n    var volumen_total =0;\n    var suma_sell =0;\n    var suma_buy = 0;\n    for (var i=0;i<largo;i++) {  //por cada exchange\n      //console.log(\"Viendo exchange\",Object.keys(data)[i] )\n      volumen = 0;\n      suma_sell =0;\n      acciones= {};\n      suma_buy = 0;\n      var key = Object.keys(data)[i]\n      //estoy en {name: \"Nasdaq Stock Market\", exchange_ticker: \"NASDAQ\", }\n      var companias =  data[key][\"listed_companies\"]\n      largo2 = companias.length;\n      var s=0;\n      var b=0;\n      //console.log(key,\"Viendo companias\",data[key][\"listed_companies\"])\n      for (var j=0;j<largo2;j++){\n        var nombre = companias[j];\n        var acc = this.state.diccionario[nombre];  //acronimo acción\n        //voy a buy\n        s=this.state.sell[acc];\n        b=this.state.buy[acc];\n        if (!s){\n          s=0\n        }\n        if (!b){\n          b=0\n        }\n        volumen+=s;\n        volumen+=b;\n        suma_buy+= b;\n        suma_sell+=s;\n        acciones[nombre] = {\"sell\":s,\"buy\":b };  //nombre de la compañia: {}\n        //console.log(\"Viendo volumen sell\",s)\n        //console.log(\"Viendo vol buy\",b)\n        }\n      \n      volumen_total+= volumen;\n      exchanges[key] = data[key];\n      exchanges[key][\"listed_companies\"] = acciones;\n      //console.log(key ,\"diccionarios en exhcange salen a´si: \", exchanges[key][\"listed_companies\"])\n      exchanges[key][\"volumen_transado\"] = volumen;\n      exchanges[key][\"cantidad_acciones\"] = largo2;\n      //console.log(\"acciones:\", largo2)\n\n      exchanges[key][\"suma_sell\"] = suma_sell;\n      exchanges[key][\"suma_buy\"] = suma_buy;\n      var total = this.state.volumen_tot[\"volumen\"];\n      //console.log(\"participacr:\",this.roundToTwo(volumen*100/total));\n\n      exchanges[key][\"participacion\"] = (volumen*100/total).toFixed(2); \n      //console.log(\"participacion  :\", exchanges[key][\"participacion\"])\n      //console.log(\"buy  :\", exchanges[key][\"listed_companies\"][\"Facebook Inc.\"]);\n      } \n    //volumen total, ver si ponerlo con las funciones de arriba que se ejecutan altiro\n    \n    var aux={};\n    //console.log(\"volumen total de ecahgnee es: \", volumen_total)\n    aux[\"volumen\"] = volumen_total;\n    \n    this.setState({ exchange: exchanges });\n    this.setState({ volumen_tot: aux});\n    this.setState({ estado_ex: true});\n    //console.log(\"volumen total this es \", this.state.volumen_tot)\n\n    //console.log(\"viiodsa:\",this.state.exchange[\"NASDAQ\"][\"participacion\"]);\n\n    //llenar variables del exchange\n    //this.state.buy -> volumen compra\n    //this.state.sell -> volumen venta\n    //this\n    //volumen total transado -> volumen\n      \n\n    }\n\n  actualizar_buy(ticker, cantidad){\n    var exchanges = this.state.exchange;\n    var name = this.state.diccionario_acc[ticker]\n    //console.log(\"estado volumen buy: \", this.state.volumen_tot)\n    var aux = this.state.volumen_tot;\n   \n    for (var ex in exchanges){\n      exchanges[ex][\"cantidad_acciones\"] = Object.keys(exchanges[ex][\"listed_companies\"]).length;\n      for (var action in exchanges[ex][\"listed_companies\"]){\n        if (action === name){\n          exchanges[ex][\"volumen_transado\"] += cantidad;\n          aux[\"volumen\"] += cantidad;\n          exchanges[ex][\"listed_companies\"][name][\"buy\"]+= cantidad;\n          exchanges[ex][\"suma_buy\"] += cantidad;\n        }\n      }\n    }\n    this.setState({ volumen_tot: aux});\n    for (var ex in exchanges){\n      exchanges[ex][\"participacion\"] = (exchanges[ex][\"volumen_transado\"]*100/this.state.volumen_tot[\"volumen\"]).toFixed(2);\n    }\n    this.setState({ exchange: exchanges });\n  }\n\n  actualizar_sell(ticker, cantidad){\n    \n    var exchanges = this.state.exchange;\n    var name = this.state.diccionario_acc[ticker]\n    //console.log(\"estado volumen sell: \", this.state.volumen_tot)\n    var aux = this.state.volumen_tot;\n    \n    for (var ex in exchanges){\n      //console.log(\"acciones en sell: \",Object.keys(exchanges[ex][\"listed_companies\"]).length)\n      exchanges[ex][\"cantidad_acciones\"] =Object.keys(exchanges[ex][\"listed_companies\"]).length\n      for (var action in exchanges[ex][\"listed_companies\"]){\n        if (action === name){\n          exchanges[ex][\"volumen_transado\"] += cantidad;\n          aux[\"volumen\"] += cantidad;\n          exchanges[ex][\"listed_companies\"][name][\"sell\"]+= cantidad;\n          exchanges[ex][\"suma_sell\"] += cantidad;\n        }\n      }\n    }\n    this.setState({ volumen_tot: aux});\n    for (var ex in exchanges){\n      exchanges[ex][\"participacion\"] = (exchanges[ex][\"volumen_transado\"]*100/this.state.volumen_tot[\"volumen\"]).toFixed(2);\n    }\n    this.setState({ exchange: exchanges });\n  }\n  \n  _onUpdate(data) { //valor historico de todas las acciones\n    //time sera siempre del ultimo\n\n    var ticker= data[\"ticker\"];\n    var estado = this.state.update;\n    //console.log(\"new state es \", estado);\n    var todosd=[];\n    var fifo= todosd.push(data);\n    this.setState({grafico: fifo});\n\n    var largo = Object.keys(this.state.update).length;\n    var presente = 0;\n    var dic = {};\n    //console.log(\"largo del dic\",Object.keys(this.state.update).length );\n    for (var i=0;i<largo;i++) {  //si está, parar\n      if (Object.keys(this.state.update)[i] === ticker) {\n        //console.log(\"está accion \", ticker);\n        presente =1;\n        //}\n        dic = {\"valor_alto\":this.state.update[ticker][\"valor_alto\"] , \"valor_bajo\":this.state.update[ticker][\"valor_bajo\"] , \"ultimo\": this.state.update[ticker][\"ultimo\"]};\n        dic[\"var\"] = (((data[\"value\"]-this.state.update[ticker][\"ultimo\"])/this.state.update[ticker][\"ultimo\"]) * 100).toFixed(2);\n        if (this.state.update[ticker][\"valor_alto\"] < data[\"value\"]){\n          dic[\"valor_alto\"] = data[\"value\"];\n          //this.setState({update: new_state});\n        }\n        if (this.state.update[ticker][\"valor_bajo\"] > data[\"value\"]){\n          dic[\"valor_bajo\"] = data[\"value\"];\n          //this.setState({update: new_state});\n        }\n        dic[\"ultimo\"] = data[\"value\"];\n        dic[\"time\"] = data[\"time\"];\n        estado[ticker] = dic;\n      } \n    }\n    \n    if (presente === 0){  //si no esta\n      //console.log(\"NOOOOOOOOOOO\");\n      dic = {\"valor_alto\":data[\"value\"], \"valor_bajo\":data[\"value\"], \"ultimo\": data[\"value\"], \"time\": data[\"time\"], \"var\":0};\n      //console.log(\"dic es\",dic);\n      estado[ticker] = dic;\n      //console.log(\"nuevo stado:\",estado);\n      this.setState({update: estado});\n    }\n  }\n\n  _onBuy(data) {  //volumen de buy agregado a sell;\n    //STOOOOCK\n    var ticker= data[\"ticker\"];\n    var new_state = this.state.stock;\n    var estado_buy = this.state.buy;\n    var estado_sell = this.state.sell;\n    var largo = Object.keys(this.state.stock).length;\n    var presente = 0;\n    var antiguo ={};\n    for (var i=0;i<largo;i++) {  //si esta, parar\n      var key = Object.keys(this.state.stock)[i];\n      if ( key === ticker) {\n        presente =1;\n        new_state[ticker] += data[\"volume\"];\n        this.setState({stock: new_state});\n        //para exchanges\n        estado_buy[ticker] += data[\"volume\"];\n        this.setState({buy: estado_buy});\n        this.actualizar_buy(ticker, data[\"volume\"]);\n      } \n\n    }\n    if (presente === 0){  //no esta\n      new_state[ticker] = data[\"volume\"];\n      this.setState({stock: new_state});\n\n      //exchange\n      estado_buy[ticker] = data[\"volume\"];\n      this.setState({buy : estado_buy});\n      this.actualizar_buy(ticker, data[\"volume\"]);\n\n      //sell exhange\n      estado_sell[ticker] = 0;\n      this.setState({sell : estado_sell});\n\n    }\n  }\n\n  _onSell(data) {  //volumen de sell agregado a buy;\n    //console.log(\"ventaAAAAAAAAAAAAAAAAAAAAA;\");\n    var ticker= data[\"ticker\"];\n    var new_state = this.state.stock;\n    var estado_buy = this.state.buy;\n    var estado_sell = this.state.sell;\n    var largo = Object.keys(this.state.stock).length;\n    var presente = 0;\n    for (var i=0;i<largo;i++) {  //parar\n      if (Object.keys(this.state.stock)[i] === ticker) {\n        presente =1;\n        new_state[ticker] += data[\"volume\"];\n        this.setState({stock: new_state});\n\n        //para exchanges\n        estado_sell[ticker] += data[\"volume\"];\n        this.setState({sell: estado_sell});\n        this.actualizar_sell(ticker, data[\"volume\"]);\n      } \n    }\n    if (presente === 0){  //no esta\n      new_state[ticker] = data[\"volume\"];\n      this.setState({stock: new_state});\n\n      //exchange\n      estado_sell[ticker] = data[\"volume\"];\n      this.setState({sell : estado_sell});\n      this.actualizar_sell(ticker, data[\"volume\"]);\n\n      //buy exchange\n      estado_buy[ticker] = 0;\n      this.setState({buy : estado_buy});\n\n    }}\n\n\n  seleccionar = (accion) => {\n      console.log(\"hago click\");\n    }\n    \n  \n  // bind deja esperando variable llena de data, si apreto boton se imprime\n  render() {\n    const items = [];\n    const items_exchange = [];\n    if (this.state.estado_ex === true){\n      for (var key in this.state.exchange) {\n        items_exchange.push(\n          <tr>\n              <td>{this.state.exchange[key][\"exchange_ticker\"]} </td>\n              <td>{this.state.exchange[key][\"name\"]} </td>\n              <td>{this.state.exchange[key][\"country\"]} </td>\n              <td>{this.state.exchange[key][\"address\"]} </td>\n              <td>\n              {Object.keys(this.state.exchange[key][\"listed_companies\"]).join(\", \")}\n              </td> \n              <td>{this.state.exchange[key][\"suma_buy\"] }</td> \n              <td>{this.state.exchange[key][\"suma_sell\"] }</td> \n              <td>{this.state.exchange[key][\"volumen_transado\"] }</td> \n              <td>{this.state.exchange[key][\"cantidad_acciones\"] }</td> \n              <td>{this.state.exchange[key][\"participacion\"] }</td>             \n          </tr>)\n      }\n    }\n\n    if (this.state.estado === true){\n      //STOCKS\n      for (var key in this.state.stock) {\n        if (this.state.update[key]){\n        //console.log(this.state.update) inicializar todo en 0\n          items.push(\n              <tr onClick={this.seleccionar.bind(this, key)} >\n                  <td> {key} </td>\n                  <td> {this.state.stock_all[key][\"company_name\"]}</td> \n                  <td> {this.state.stock_all[key][\"country\"]}</td> \n                  <td> {this.state.stock_all[key][\"quote_base\"]}</td> \n                  <td> {this.state.stock[key]}</td>\n                  <td> {this.state.update[key][\"valor_alto\"]}</td> \n                  <td> {this.state.update[key][\"valor_bajo\"]}</td> \n                  <td> {this.state.update[key][\"ultimo\"]}</td> \n                  <td> {this.state.update[key][\"var\"]}</td>  \n              </tr>\n          )}\n        else{\n          items.push(\n            <tr onClick={this.seleccionar.bind(this, key)} >\n                <td> {key} </td>\n                <td> {this.state.stock_all[key][\"company_name\"]}</td> \n                <td> {this.state.stock_all[key][\"country\"]}</td> \n                <td> {this.state.stock_all[key][\"quote_base\"]}</td> \n                <td> {this.state.stock[key]}</td>\n                <td> - </td>\n                <td> - </td>\n                <td> - </td>\n                <td> - </td>\n            </tr>\n        )\n        }\n\n      }}\n\n    return ( \n      <div>     \n        <h4>Tu estado es: {this.state.conexion}</h4>\n        \n        <button onClick={this.handleClick.bind(this)}>  \n          Desconectar\n        </button>\n        <br/><br/>\n        <button onClick={this.componentDidMount.bind(this)}>  \n          Volver a conectar\n        </button>\n        <br/><br/>\n        <h2 align=\"center\"> STOCKS </h2>\n          <table  className='GeneratedTable' >\n          <thead>\n          <tr>\n          <th>Ticker</th>\n          <th>Nombre empresa</th>\n          <th>País</th>\n          <th>Quote Base</th>\n          <th>Volumen total transado</th>\n          <th>Alto histórico</th>\n          <th>Bajo histórico</th>\n          <th>Último precio</th>\n          <th>Variación porcentual</th>\n          </tr>\n          </thead>\n\n          <tbody>\n              {items}\n          </tbody>\n          </table>\n          \n          &nbsp;\n          &nbsp;\n          &nbsp;\n         \n\n        <h2 align=\"center\"> EXCHANGES </h2>\n        \n          <table  className='GeneratedTable' >\n          <thead>\n          <tr>\n          <th>Exchange ticker</th>\n          <th>Nombre</th>\n          <th>País</th>\n          <th>Dirección</th>\n          <th>Compañías listadas</th>\n          <th>Volumen Compra</th>\n          <th>Volumen Venta</th>\n          <th>Volumen total</th>\n          <th>Cantidad Acciones</th>\n          <th>Participación de Mercado</th>\n          </tr>\n          </thead>\n          <tbody>\n              {items_exchange}\n          </tbody>\n          </table>\n\n          &nbsp;\n          &nbsp;\n        </div>\n    )\n  }\n  }\n//para el gráfico añadir <StocksGraph stocks={this.state.update} />\n\nexport default App;\n","import React from 'react'\r\nimport {Line} from 'react-chartjs-2';\r\nimport * as zoom from 'chartjs-plugin-zoom'\r\nimport { chartJsConfig, chartColors, chartDataset } from '../chartConfig.js'\r\n// Código extraído de https://github.com/virajvchavan/stocks/blob/master/src/components/StocksGraph.jsx\r\nclass StocksGraph extends React.Component {\r\n  updateChart = () => {\r\n    let chart = this.refs.chart.chartInstance;\r\n\r\n    if(Object.keys(this.props.stocks).length === 0)\r\n    {\r\n      chart.data.datasets = [];\r\n      return chart.update();\r\n    }\r\n\r\n    Object.keys(this.props.stocks).map((stock_name, index) =>\r\n    {\r\n      let current_stock = this.props.stocks[stock_name];\r\n      let chart_dataset = chart.data.datasets.find((dataset) => {\r\n        return dataset.label === stock_name.toUpperCase()\r\n      });\r\n\r\n      if(current_stock[\"is_selected\"])\r\n      {\r\n        let current_stock = this.props.stocks[stock_name];\r\n        if(chart_dataset)\r\n        {\r\n          // only update the data, don't create a new dataset for the graph\r\n          chart_dataset.data = this.getStockValues(current_stock);\r\n        }\r\n        else\r\n        {\r\n          // create a new dataset for graph\r\n          if(current_stock)\r\n          {\r\n            chart.data.datasets = chart.data.datasets.concat(\r\n              [\r\n                chartDataset(stock_name, chartColors[index], this.getStockValues(current_stock))\r\n              ]\r\n            )\r\n          }\r\n        }\r\n      }\r\n      else\r\n      {\r\n        if(chart_dataset)\r\n        {\r\n          // remove the dataset from graph\r\n          chart.data.datasets.splice(chart.data.datasets.indexOf(chart_dataset), 1);\r\n        }\r\n      }\r\n      chart.update();\r\n    })\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    this.updateChart();\r\n  }\r\n\r\n  // returns an array of objects, {t: timestamp, y: value}\r\n  getStockValues = (stock) =>{\r\n    return stock.history.map((history) => {\r\n      return {t: new Date(history.time), y: history.value};\r\n    })\r\n  }\r\n\r\n  resetZoom = () => {\r\n    this.refs.chart.chartInstance.resetZoom();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={'card column'} >\r\n        <div className='card-header'>\r\n          <div className='card-header-title'>\r\n            Graph\r\n          </div>\r\n        </div>\r\n        <div className='card-content'>\r\n          <p className='is-size-7 has-text-info'>\r\n            {\r\n              this.refs.chart &&\r\n              this.refs.chart.chartInstance.data.datasets.length > 0 ? 'Scroll/pinch to zoom, drag to pan.' : 'Click on any stocks on your left to see graphs.'\r\n            }\r\n          </p>\r\n          <button className=\"button is-small is-pulled-right\" onClick={this.resetZoom}>Reset zoom</button>\r\n          <Line\r\n            data={{datasets: []}}\r\n            options={chartJsConfig}\r\n            ref='chart'\r\n          />\r\n        </div> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StocksGraph;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}